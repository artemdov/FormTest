{"version":3,"sources":["store/form.ts","Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["error","makeObservable","this","observable","value","Form","observer","useState","valueName","setValueName","valueSurName","setValueSurName","change","setChange","validateName","length","validateSurName","className","type","placeholder","onChange","e","target","formStore","onClick","ErrorForm","App","FormStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAkBe,M,WAZX,aAAe,yBAFfA,MAAQ,GAGJC,YAAeC,KAAM,CACjBF,MAAOG,M,6CAIf,SAAUC,GACNF,KAAKF,MAAQI,M,aCGRC,EAAgCC,aAAS,WAAO,IAAD,EAEtBC,mBAAiB,IAFK,mBAEjDC,EAFiD,KAEtCC,EAFsC,OAGhBF,mBAAiB,IAHD,mBAGjDG,EAHiD,KAGnCC,EAHmC,OAI5BJ,oBAAkB,GAJU,mBAIjDK,EAJiD,KAIzCC,EAJyC,KA2BlDC,EAAeN,IAAcE,GAAgBF,EAAUO,OAAS,EAChEC,EAAkBR,IAAcE,GAAgBA,EAAaK,OAAS,EAC5E,OACI,qBAAKE,UAAU,UAAf,SAEI,sBAAKA,UAAU,OAAf,WACML,GAAU,sBAAKK,UAAU,oBAAf,UAER,uBAAOA,UAAU,kBAAkBC,KAAK,OACjCC,YAAY,qBACZf,MAAOI,EACPY,SAhCO,SAACC,GAC3BZ,EAAaY,EAAEC,OAAOlB,UAiCTU,GAAgBS,EAAUvB,OAAS,qBAAKiB,UAAU,gBAAf,SAAgCM,EAAUvB,QAC9E,uBAAOiB,UAAU,qBAAqBC,KAAK,OACpCC,YAAY,6CACZf,MAAOM,EACPU,SAnCU,SAACC,GAC9BV,EAAgBU,EAAEC,OAAOlB,UAoCZY,GAAmBO,EAAUvB,OAAS,qBAAKiB,UAAU,mBAAf,SAAmCM,EAAUvB,QAEpF,wBAAQiB,UAAU,SAASO,QAnCf,WACxB,OAAIhB,EAAUO,OAAS,EACZQ,EAAUE,UAAU,0BACpBf,EAAaK,OAAS,EACtBQ,EAAUE,UAAU,6BACpBjB,IAAcE,EACda,EAAUE,UAAU,2BAE/BZ,GAAU,IA2BE,qDAIHD,GAAU,sBAAKK,UAAU,aAAf,8FACWT,EADX,YACwBE,GAC/B,wBAAQO,UAAU,eAAeO,QA/BhB,WAC7BX,GAAU,IA8BE,0BCzDLa,MARf,WACE,OACI,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,CAAMU,UAAWA,OCMVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f03cbeca.chunk.js","sourcesContent":["import {makeObservable, observable} from \"mobx\";\r\n\r\n\r\nclass FormStore {\r\n    error = ''\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            error: observable\r\n        })\r\n    }\r\n\r\n    ErrorForm(value: string) {\r\n        this.error = value\r\n    }\r\n\r\n}\r\n\r\nexport default new FormStore()\r\n\r\n\r\n/*\r\nimport {action, observable} from \"mobx\"\r\n\r\ntype FormStoreStateType = {\r\n    valueName: string,\r\n    valueSecName: string,\r\n    error: string,\r\n    ErrorForm: (error: string) => void\r\n}\r\nconst FormStore: FormStoreStateType = observable( {\r\n    valueName: '',\r\n    valueSecName: '',\r\n    error: '',\r\n\r\n    ErrorForm: action(function (error: string) {\r\n            FormStore.error = error\r\n        }\r\n    )\r\n\r\n    /!*if(FormStore.valueName.length < 3) {\r\n        FormStore.error = 'enter the required text'\r\n    } else if(FormStore.valueSecName.length < 3) {\r\n        FormStore.error = 'enter the required text'\r\n    } else if(FormStore.valueName === this.valueSecName){\r\n        FormStore.error = 'enter the required text'\r\n    } else{\r\n        return\r\n    }*!/\r\n\r\n})\r\n\r\nexport default FormStore*/\r\n","import React, {ChangeEvent, useState} from \"react\"\r\nimport './App.css'\r\nimport {observer} from \"mobx-react-lite\";\r\nimport './Form.scss'\r\nimport formStore from './store/form'\r\n\r\ntype FormStoreType = {\r\n    error: string,\r\n    ErrorForm: (error: string) => void\r\n}\r\n\r\ntype FormPropsType = {\r\n    FormStore: FormStoreType\r\n}\r\n\r\n\r\nexport const Form: React.FC<FormPropsType> = observer(() => {\r\n\r\n    const [valueName, setValueName] = useState<string>('')\r\n    const [valueSurName, setValueSurName] = useState<string>('')\r\n    const [change, setChange] = useState<boolean>(false)\r\n\r\n    const handleValueNameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueName(e.target.value)\r\n    }\r\n    const handleValueSecNameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueSurName(e.target.value)\r\n    }\r\n\r\n    const handleDisplayChange = () => {\r\n        if (valueName.length < 3) {\r\n            return formStore.ErrorForm('enter the correct name')\r\n        } else if (valueSurName.length < 3) {\r\n            return formStore.ErrorForm('enter the correct surname')\r\n        } else if (valueName === valueSurName) {\r\n            return formStore.ErrorForm('enter correct data')\r\n        }\r\n        setChange(true)\r\n    }\r\n    const handleDisplayModalChange = () => {\r\n        setChange(false)\r\n    }\r\n\r\n    const validateName = valueName === valueSurName || valueName.length < 3\r\n    const validateSurName = valueName === valueSurName || valueSurName.length < 3\r\n    return (\r\n        <div className='Display'>\r\n\r\n            <div className='Form'>\r\n                {!change && <div className='Form-input-button'>\r\n\r\n                    <input className='Form-input-name' type=\"text\"\r\n                           placeholder=\"Имя\"\r\n                           value={valueName}\r\n                           onChange={handleValueNameChange}\r\n                    />\r\n                    {validateName && formStore.error && <div className='Validate-name'>{formStore.error}</div>}\r\n                    <input className='Form-input-surname' type=\"text\"\r\n                           placeholder=\"Фамилия\"\r\n                           value={valueSurName}\r\n                           onChange={handleValueSecNameChange}\r\n                    />\r\n                    {validateSurName && formStore.error && <div className='Validate-surname'>{formStore.error}</div>}\r\n\r\n                    <button className='Button' onClick={handleDisplayChange}>Готово</button>\r\n                </div>\r\n                }\r\n\r\n                {change && <div className='Form-modal'>\r\n                    {`Здравствуйте, ${valueName} ${valueSurName}`}\r\n                    <button className='Button-modal' onClick={handleDisplayModalChange}>x</button>\r\n                </div>}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\nimport './App.css';\nimport {Form} from \"./Form\";\nimport FormStore from \"./store/form\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Form FormStore={FormStore} />\n      </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}